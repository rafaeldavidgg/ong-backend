// seed.js
require("dotenv").config();
const mongoose = require("mongoose");
const { fakerES: faker } = require("@faker-js/faker");

const Familiar = require("../models/Familiar");
const Trabajador = require("../models/Trabajador");
const Usuario = require("../models/Usuario");
const TipoActividad = require("../models/TipoActividad");
const Actividad = require("../models/Actividad");
const Asistencia = require("../models/Asistencia");
const Evento = require("../models/Evento");
const Incidencia = require("../models/Incidencia");
const SolicitudAsociacion = require("../models/SolicitudAsociacion");

function generarDNI() {
  const letras = "TRWAGMYFPDXBNJZSQVHLCKE";
  const numero = Math.floor(Math.random() * 100000000);
  const letra = letras[numero % 23];
  return numero.toString().padStart(8, "0") + letra;
}

const nombresActividades = [
  "Taller de pintura creativa",
  "Sesi√≥n de musicoterapia",
  "Clase de cocina saludable",
  "Yoga adaptado",
  "Taller de cer√°mica",
  "Juegos cooperativos",
  "Cuentacuentos interactivo",
  "Manualidades con papel",
  "Danza libre",
  "Horticultura terap√©utica",
  "Taller de teatro",
  "Juegos de mesa educativos",
  "Estimulaci√≥n sensorial",
  "Taller de dibujo libre",
  "Sesi√≥n de relajaci√≥n guiada",
];

const eventosData = [
  {
    nombre: "Fiesta de bienvenida",
    descripcion:
      "Celebramos la llegada de nuevos participantes con juegos y m√∫sica.",
  },
  {
    nombre: "Salida al parque",
    descripcion: "Disfrutaremos de un d√≠a al aire libre en el parque cercano.",
  },
  {
    nombre: "Cine en familia",
    descripcion: "Proyecci√≥n de una pel√≠cula adaptada para todos los p√∫blicos.",
  },
  {
    nombre: "Tarde de karaoke",
    descripcion: "Canta tus canciones favoritas en un ambiente divertido.",
  },
  {
    nombre: "Taller de reposter√≠a",
    descripcion: "Aprenderemos a hacer galletas y bizcochos de forma sencilla.",
  },
  {
    nombre: "Jornada deportiva",
    descripcion:
      "Competencias amistosas y juegos de equipo para fomentar el movimiento.",
  },
  {
    nombre: "D√≠a de disfraces",
    descripcion:
      "Trae tu disfraz favorito y participa en el desfile de personajes.",
  },
  {
    nombre: "Fiesta tem√°tica",
    descripcion:
      "Decoramos y ambientamos seg√∫n una tem√°tica divertida elegida por todos.",
  },
  {
    nombre: "Concierto de talentos",
    descripcion: "Un espacio para mostrar tus habilidades art√≠sticas.",
  },
  {
    nombre: "Encuentro con familias",
    descripcion:
      "Actividades colaborativas para fortalecer v√≠nculos familiares.",
  },
];

(async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log("\nüîå Conectado a MongoDB\n");

    await Promise.all([
      Familiar.deleteMany(),
      Trabajador.deleteMany(),
      Usuario.deleteMany(),
      TipoActividad.deleteMany(),
      Actividad.deleteMany(),
      Asistencia.deleteMany(),
      Evento.deleteMany(),
      Incidencia.deleteMany(),
      SolicitudAsociacion.deleteMany(),
    ]);
    console.log("üì¶ Datos anteriores eliminados");

    const trabajadorTecnico = new Trabajador({
      nombre: "Javier",
      apellido: "L√≥pez",
      telefono: 600000001,
      dni: "12345678T",
      email: "tecnico@gmail.com",
      contrase√±a: "tecnico123",
      tipo: "Tecnico",
      fechaIncorporacion: new Date(),
    });
    await trabajadorTecnico.save();

    const trabajadorAuxiliar = new Trabajador({
      nombre: "Mar√≠a",
      apellido: "Ruiz",
      telefono: 600000002,
      dni: "23456789A",
      email: "auxiliar@gmail.com",
      contrase√±a: "auxiliar123",
      tipo: "Auxiliar",
      fechaIncorporacion: new Date(),
    });
    await trabajadorAuxiliar.save();

    const familiarFijo = new Familiar({
      nombre: "Carmen",
      apellido: "Fern√°ndez",
      telefono: 600000003,
      dni: "34567890B",
      email: "familiar@gmail.com",
      contrase√±a: "familiar123",
      tipoDeRelacionConUsuario: "Madre",
    });
    await familiarFijo.save();

    const trabajadores = [trabajadorTecnico, trabajadorAuxiliar];
    for (let i = 0; i < 30; i++) {
      const t = new Trabajador({
        nombre: faker.person.firstName(),
        apellido: faker.person.lastName(),
        telefono: Number("6" + faker.string.numeric(8)),
        dni: generarDNI(),
        email: faker.internet.email(),
        contrase√±a: "123456",
        tipo: i % 2 === 0 ? "Auxiliar" : "Tecnico",
        fechaIncorporacion: faker.date.past({ years: 3 }),
      });
      await t.save();
      trabajadores.push(t);
    }
    console.log("üë∑‚Äç‚ôÇÔ∏è Trabajadores creados");

    const familiares = [familiarFijo];
    for (let i = 0; i < 30; i++) {
      const f = new Familiar({
        nombre: faker.person.firstName(),
        apellido: faker.person.lastName(),
        telefono: Number("6" + faker.string.numeric(8)),
        dni: generarDNI(),
        email: faker.internet.email(),
        contrase√±a: "123456",
        tipoDeRelacionConUsuario: "Padre",
      });
      await f.save();
      familiares.push(f);
    }
    console.log("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Familiares creados");

    const usuarios = [];
    for (let i = 0; i < 30; i++) {
      const u = new Usuario({
        nombre: faker.person.firstName(),
        apellido: faker.person.lastName(),
        telefono: Number("6" + faker.string.numeric(8)),
        dni: generarDNI(),
        fechaNacimiento: faker.date.birthdate({
          min: 10,
          max: 25,
          mode: "age",
        }),
        tipoAutismo: faker.helpers.arrayElement([
          "ASPERGER",
          "AUTISMO_CLASICO",
          "TGD_NE",
          "TRASTORNO_DESINTEGRATIVO",
        ]),
        gradoAutismo: faker.number.int({ min: 1, max: 100 }),
        grupoTrabajo: faker.number.int({ min: 1, max: 3 }),
      });
      await u.save();
      usuarios.push(u);
    }
    console.log("üßí Usuarios creados");

    familiares.forEach(async (f, i) => {
      f.usuariosAsociados = usuarios
        .slice(i % 25, (i % 25) + 2)
        .map((u) => u._id);
      await f.save();
    });

    const tipos = [
      {
        nombreTipo: "Pintura terap√©utica",
        descripcion: "Actividad de expresi√≥n creativa con pinturas.",
        duracion: 60,
        materiales: "Acuarelas, pinceles, papel",
      },
      {
        nombreTipo: "M√∫sica y movimiento",
        descripcion: "Baile libre y ritmos para liberar tensiones.",
        duracion: 45,
        materiales: "Altavoz, m√∫sica",
      },
      {
        nombreTipo: "Cocina f√°cil",
        descripcion: "Preparaci√≥n de recetas sencillas.",
        duracion: 90,
        materiales: "Ingredientes, utensilios b√°sicos",
      },
    ];
    const tipoDocs = [];
    for (const t of tipos) {
      const doc = new TipoActividad(t);
      await doc.save();
      tipoDocs.push(doc);
    }
    console.log("üè∑Ô∏è Tipos de actividad creados");

    for (let i = 0; i < 30; i++) {
      const actividad = new Actividad({
        nombre: faker.helpers.arrayElement(nombresActividades),
        fecha: faker.date.recent({ days: 30 }),
        realizadaPor: faker.helpers.arrayElements(
          usuarios.map((u) => u._id),
          2
        ),
        ejecutadaPor: faker.helpers.arrayElements(
          trabajadores.map((t) => t._id),
          2
        ),
        creadaPor: faker.helpers.arrayElement(
          trabajadores.filter((t) => t.tipo === "Tecnico")
        )._id,
        tipoActividad: faker.helpers.arrayElement(tipoDocs)._id,
      });
      await actividad.save();
    }
    console.log("üìÜ Actividades creadas");

    for (let i = 0; i < 60; i++) {
      const asistencia = new Asistencia({
        fecha: faker.date.recent({ days: 30 }),
        presente: faker.datatype.boolean(),
        justificada: faker.datatype.boolean(),
        descripcion: faker.lorem.sentence(),
        usuario: faker.helpers.arrayElement(usuarios)._id,
        justificadaPor: faker.helpers.arrayElement(familiares)._id,
      });
      await asistencia.save();
    }
    console.log("üìã Asistencias creadas");

    for (let i = 0; i < eventosData.length; i++) {
      const e = eventosData[i];
      const entradasTotales = faker.number.int({ min: 15, max: 50 });
      const evento = new Evento({
        nombre: e.nombre,
        descripcion: e.descripcion,
        fecha: faker.date.future({ days: 60 }),
        entradasTotales,
        entradasDisponibles: entradasTotales,
        trabajadoresMinimos: faker.number.int({ min: 1, max: 3 }),
        participantes: faker.helpers.arrayElements(
          trabajadores.map((t) => t._id),
          3
        ),
        creadoPor: faker.helpers.arrayElement(
          trabajadores.filter((t) => t.tipo === "Tecnico")
        )._id,
      });
      await evento.save();
    }
    console.log("üéüÔ∏è Eventos creados");

    for (let i = 0; i < 30; i++) {
      const incidencia = new Incidencia({
        fecha: faker.date.recent(),
        tipoIncidencia: faker.helpers.arrayElement([
          "AGITACION",
          "AUTOLESION",
          "AGRESION_VERBAL",
          "AGRESION_FISICA",
          "SOBRECARGA_SENSORIAL",
          "OTRO",
        ]),
        descripcion: faker.lorem.sentence(),
        usuario: faker.helpers.arrayElement(usuarios)._id,
        creadaPor: faker.helpers.arrayElement(
          trabajadores.filter((t) => t.tipo === "Tecnico")
        )._id,
      });
      await incidencia.save();
    }
    console.log("‚ö†Ô∏è Incidencias creadas");

    for (let i = 0; i < 10; i++) {
      const solicitud = new SolicitudAsociacion({
        familiar: faker.helpers.arrayElement(familiares)._id,
        usuario: faker.helpers.arrayElement(usuarios)._id,
        estado: "pendiente",
      });
      await solicitud.save();
    }
    console.log("üì® Solicitudes de asociaci√≥n creadas");

    console.log("\n‚úÖ Seed completado correctamente\n");
    mongoose.disconnect();
  } catch (error) {
    console.error("‚ùå Error en el seed:", error);
    mongoose.disconnect();
  }
})();
